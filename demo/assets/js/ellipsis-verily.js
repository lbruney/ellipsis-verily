// Generated by CoffeeScript 1.7.1

/*
  A true plugin for text truncation.

  @autor Lisa-Ann Bruney <lisabruney@yahoo.com>
  @year 2014
 */

(function() {
  (function($) {
    'use scrict';
    var EllipsisVerily;
    EllipsisVerily = function(element, options) {
      var defaults;
      defaults = {
        max: 450,
        handler: '.ellipsis-handler',
        visible: '.visible-text',
        truncated: '.truncated-text',
        ellipsis: '.ellipsis-text',
        hiddenClass: 'display-none',
        showClass: 'display-inline',
        activeClass: 'open',
        moreText: 'Read more',
        lessText: 'Show less',
        parent: null,
        normalTags: ['p', 'span', 'strong', 'em', 'label', 'br', 'h1', 'h2', 'h3', 'h4', 'b', 'code', 'ul', 'li'],
        attributedTags: ['a', 'img']
      };
      this.options = $.extend(defaults, options);
      this.element = $(element);
      this.tags = this.options.normalTags.concat(this.options.attributedTags);
      this.normalTagCount = this.options.normalTags.length;
      this.attributedTagCount = this.options.attributedTags.length;
      this.tagsLength = {};
      this.init();
    };
    EllipsisVerily.prototype.init = function() {
      this.placeHolderTags();
      this.makeEllipsis();
      this.setEvents();
    };
    EllipsisVerily.prototype.setEvents = function() {
      var $parent, $parentsUntil, that;
      that = this;
      if (this.options.parent) {
        $parentsUntil = this.element.parentsUntil(this.options.parent);
        $parent = ($parentsUntil.length > 0 ? $parentsUntil.parent() : this.element.parent());
        this.handler = $parent.find(this.options.handler);
      } else {
        this.handler = $(this.options.handler);
      }
      this.handler.click(function() {
        var $element;
        $element = $(this);
        $element.toggleClass(that.options.activeClass);
        if ($element.hasClass(that.options.activeClass)) {
          $element.text(that.options.lessText);
        } else {
          $element.text(that.options.moreText);
        }
        that.element.find(that.options.ellipsis).toggleClass(that.options.hiddenClass).toggleClass(that.options.showClass);
        that.element.find(that.options.truncated).toggleClass(that.options.hiddenClass).toggleClass(that.options.showClass);
        return false;
      });
    };
    EllipsisVerily.prototype.placeHolderTags = function() {
      var i;
      this.html = this.element.html();
      this.attributedTag = {};
      i = 0;
      while (i < this.normalTagCount) {
        this.replaceTag(this.tags[i]);
        i++;
      }
      i = this.normalTagCount;
      while (i < this.normalTagCount + this.attributedTagCount) {
        this.replaceAttributedTag(this.tags[i]);
        i++;
      }
      this.html = this.stripOtherTags(this.html);
    };
    EllipsisVerily.prototype.stripOtherTags = function(text) {
      return text.replace(/(<([^>]+)>)/ig, '');
    };
    EllipsisVerily.prototype.replaceAttributedTag = function(tag) {
      this.attributedTag[tag] = $(tag);
      this.html = this.html.replace(this.getRegex(this.getTag(tag)), this.getPlaceholderTag(tag) + this.getPlaceholderTag(tag, false));
    };
    EllipsisVerily.prototype.replaceTag = function(tag) {
      this.html = this.html.replace(this.getRegex(this.getTag(tag)), this.getPlaceholderTag(tag));
      this.html = this.html.replace(this.getRegex(this.getTag(tag, false)), this.getPlaceholderTag(tag, false));
    };
    EllipsisVerily.prototype.replenishTag = function(tag) {
      this.finalHtml = this.finalHtml.replace(this.getRegex(this.getPlaceholderTag(tag)), this.getTag(tag, true, true));
      this.finalHtml = this.finalHtml.replace(this.getRegex(this.getPlaceholderTag(tag, false)), this.getTag(tag, false));
    };
    EllipsisVerily.prototype.replenishAttributedTag = function(tag) {
      var i, inner, original, placeholder;
      i = 0;
      while (i < this.attributedTag[tag].length) {
        original = this.attributedTag[tag][i].outerHTML;
        inner = this.attributedTag[tag][i].innerHTML;
        placeholder = this.getPlaceholderTag(tag) + this.getPlaceholderTag(tag, false) + inner;
        this.finalHtml = this.finalHtml.replace(this.getRegex(placeholder), original);
        i++;
      }
    };
    EllipsisVerily.prototype.getTag = function(tag, opening, simple) {
      if (opening == null) {
        opening = true;
      }
      if (simple == null) {
        simple = false;
      }
      if (opening) {
        if (simple) {
          return '<' + tag + '>';
        } else {
          return '<' + tag + '([^>]*)>';
        }
      } else {
        return '</' + tag + '>';
      }
    };
    EllipsisVerily.prototype.getPlaceholderTag = function(tag, opening) {
      if (opening == null) {
        opening = true;
      }
      if (opening) {
        return '{' + tag + '}';
      } else {
        return '{/' + tag + '}';
      }
    };
    EllipsisVerily.prototype.makeEllipsis = function() {
      var max, splitLocation;
      max = (this.getTotalTags() * 5) + this.options.max;
      if (this.html.length < max) {
        return;
      }
      splitLocation = this.html.indexOf(' ', max);
      this.half1 = this.html.substr(0, splitLocation);
      this.half2 = this.html.substr(splitLocation, this.html.length - 1);
      this.findBreaks();
      this.recreateHtml();
      this.element.html(this.finalHtml);
    };
    EllipsisVerily.prototype.findBreaks = function() {
      var closeTags, d, difference, i, openTags, openingTag;
      i = 0;
      while (i < this.normalTagCount) {
        openingTag = this.getPlaceholderTag(this.tags[i]);
        openTags = this.countOccurrences(openingTag);
        closeTags = this.countOccurrences(this.getPlaceholderTag(this.tags[i], false));
        if (openTags > closeTags) {
          difference = openTags - closeTags;
          d = 0;
          while (d < difference) {
            this.moveToTruncated(this.half1.lastIndexOf(openingTag));
            d++;
          }
        }
        i++;
      }
    };
    EllipsisVerily.prototype.recreateHtml = function() {
      var i;
      i = 0;
      this.finalHtml = '<div class="' + this.options.visible.substr(1) + '">' + this.half1 + '<span class="' + this.options.ellipsis.substr(1) + ' ' + this.options.showClass + '">...</span></div><div class="' + this.options.truncated.substr(1) + ' ' + this.options.hiddenClass + '" >' + this.half2 + '</div>';
      while (i < this.normalTagCount) {
        this.replenishTag(this.tags[i]);
        i++;
      }
      i = this.normalTagCount;
      while (i < this.normalTagCount + this.attributedTagCount) {
        this.replenishAttributedTag(this.tags[i]);
        i++;
      }
    };
    EllipsisVerily.prototype.moveToTruncated = function(from) {
      var temp;
      temp = this.half1.substr(from, this.half1.length - 1);
      this.half2 = temp + this.half2;
      this.half1 = this.half1.substr(0, from);
    };
    EllipsisVerily.prototype.countOccurrences = function(tag) {
      var matches;
      matches = this.half1.match(this.getRegex(tag));
      if (matches) {
        return matches.length;
      } else {
        return 0;
      }
    };
    EllipsisVerily.prototype.getRegex = function(tag) {
      return new RegExp(tag, 'gi');
    };
    EllipsisVerily.prototype.getTotalTags = function() {
      var that, totalTagsLength;
      that = this;
      totalTagsLength = 0;
      $.each(this.tags, function(key, value) {
        var length;
        length = that.element.find(value).length;
        totalTagsLength = totalTagsLength + length;
        that.tagsLength[value] = length;
      });
      return totalTagsLength;
    };
    EllipsisVerily.prototype.hasTag = function(tag) {
      return that.tagsLength[tag] > 0;
    };
    $.fn.EllipsisVerily = function(options) {
      $(this).each(function(i, element) {
        if (!$(this).data('ellipsis-verily')) {
          return $(this).data('ellipsis-verily', new EllipsisVerily(this, options));
        }
      });
    };
  })(jQuery);

}).call(this);
